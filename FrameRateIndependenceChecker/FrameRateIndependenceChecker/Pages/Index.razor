@inject NavigationManager navigationManager
@page "/"
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.ScatterChart
@inject IJSRuntime jsRuntime

<h1>Frame Rate Independence Checker</h1>
Check if your code is actually frame rate independent. Made by <a href="https://twitter.com/zappablamma">John Tringham</a>
<br />
<br />
Fill in the body of the <code>Update</code> method below (in C#), and set the <code>value</code> field. Use <code>deltaTime</code> as part of your calculations. Some of Unity's Mathf class has been implemented.
<br />
When you're ready, press go. More info below.
<br />
<br />

<div class="codezone">
    public static float value;<br />
    public static void Update(float deltaTime)<br />{
<textarea @bind="InputCode" rows="5" class="md-textarea form-control inputcode"></textarea>
    }
</div>

<br />

<ul>
    @foreach (var error in @compilationErrors)
    {
        <li>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="#ff2912" class="bi bi-exclamation-triangle" viewBox="0 0 16 16">
                <path d="M7.938 2.016A.13.13 0 0 1 8.002 2a.13.13 0 0 1 .063.016.146.146 0 0 1 .054.057l6.857 11.667c.036.06.035.124.002.183a.163.163 0 0 1-.054.06.116.116 0 0 1-.066.017H1.146a.115.115 0 0 1-.066-.017.163.163 0 0 1-.054-.06.176.176 0 0 1 .002-.183L7.884 2.073a.147.147 0 0 1 .054-.057zm1.044-.45a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566z" />
                <path d="M7.002 12a1 1 0 1 1 2 0 1 1 0 0 1-2 0zM7.1 5.995a.905.905 0 1 1 1.8 0l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995z" />
            </svg> @error
        </li>
    }
</ul>

<button type="button" class="btn btn-primary btn-lg btn-block" @onclick="Run" @ref="runButton">@buttonLabel</button>

<br />

<div class="chartzone">
    <Chart Config="chartConfig"></Chart>
</div>

<br />
<br />


This page simulates running an update function at different framerates, in order to test how framerate-independant an expression is.
<br />
<br />

To test 60FPS, it goes through and evaluates the function 60 times, passing 1/60 as <code>deltaTime</code> and records the value at each iteration. It does the same with 10FPS, 30FPS, 90FPS, 144FPS and 240FPS. The 'Erratic' plot works by using a random frame rate each time (between 10fps and 60fps). It then plots these results onto a graph.
<br />
<br />

Ideally, if the code is truely framerate independant, then each iteration will produce the same curve on the graph. If it is not, then the curves will deviate from each other.
<br />
<br />

Click <a href="https://localhost:44349/#dmFyIGxhbWJkYSA9IDEwZjsKdmFyIHRhcmdldCA9IDEwMGY7CnZhbHVlID0gTWF0aGYuTGVycCh2YWx1ZSwgdGFyZ2V0LCAxIC0gTWF0aGYuRXhwKC1sYW1iZGEgKiBkZWx0YVRpbWUpKTs=" @onclick="GoodExample">here</a> to see an example of a good framerate independant easing function, that uses <a href="https://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/">Rory Driscoll's Lambda Decay method</a>. Click <a href="https://localhost:44349/#Ly8gRXhhbXBsZSBvZiBhIGJhZCBlYXNpbmcgZnVuY3Rpb24KdmFyIHNwZWVkID0gMTBmOwp2YXIgdGFyZ2V0ID0gMTAwZjsKdmFsdWUgPSBNYXRoZi5MZXJwKHZhbHVlLCB0YXJnZXQsIHNwZWVkICogZGVsdGFUaW1lKTs=" @onclick="BadExample">here</a> to see a bad example, that uses naive lerping using deltaTime.

<br />
<br />
Once you run a snippet, that code will be saved into the URL, so if you share the full link to someone else they'll see the same graph that you're seeing.
<br />
<br />

C# Compilation code heavily based on <a href="https://www.strathweb.com/2019/06/building-a-c-interactive-shell-in-a-browser-with-blazor-webassembly-and-roslyn/">this article</a> by <a href="https://twitter.com/filip_woj">Filip W</a>. Charts are made using <a href="https://www.nuget.org/packages/ChartJs.Blazor/">ChartJs.Blazor</a>.
<br />
<br />
Made by John Tringham. You can follow me on <a href="https://twitter.com/zappablamma">twitter</a>

<br />
<br />

<small><small><small>Also disclaimer: frame rate independence isn't the most important thing in the world, don't worry about it too much. I made this website to procrastinate working on my game that has frame rate independance issues lol</small></small></small>
<br />
<br />

<br />
<br />
<br />
<br />

@code{
    public string InputCode = "";

    public CodeCompiler codeChecker = new CodeCompiler();

    private ScatterConfig chartConfig = new ScatterConfig()
    {
        Options = new LineOptions()
        {
            Title = new OptionsTitle() { Display = true, Text = "Results" },
        },
    };

    protected async override Task OnInitializedAsync()
    {
        var url = new Uri(navigationManager.Uri);
        var end = url.Fragment;
        Console.WriteLine("Fragment:" + end);

        bool fromUrl = false;
        if (end != string.Empty && end != "#")
        {
            var value = end.Remove(0, 1);
            var decoded = Base64Decode(value);
            InputCode = decoded;
            fromUrl = true;
        }
        else
        {
            this.InputCode = Base64Decode("Ly8gRXhhbXBsZSBvZiBhIGJhZCBlYXNpbmcgZnVuY3Rpb24KdmFyIHNwZWVkID0gMTBmOwp2YXIgdGFyZ2V0ID0gMTAwZjsKdmFsdWUgPSBNYXRoZi5MZXJwKHZhbHVlLCB0YXJnZXQsIHNwZWVkICogZGVsdGFUaW1lKTs=");
        }

        buttonLabel = "Compiling...";

        await codeChecker.OnInitializedAsync(navigationManager.BaseUri);

        await Run();
        //if (fromUrl)
        //{
        //    await Run();
        //}
        //else
        //{
        //    await BadExample();
        //}
    }

    [Parameter]
    public string buttonLabel { get; set; } = "Run";

    public List<string> compilationErrors { get; set; } = new List<string>();

    private ElementReference runButton;

    private bool running = false;

    public async Task Run()
    {
        if (running)
        {
            return;
        }

        running = true;
        buttonLabel = "Compiling...";
        chartConfig.Data.Datasets.Clear();

        Console.WriteLine("id: " + runButton.Id);

        var actualCode = "public class MainThing { public static float value {get;set;}\n public static void Update(float deltaTime) { " + InputCode + " } }";
        Console.WriteLine("Input:" + actualCode);
        (var snippet, var errors) = await codeChecker.Compile(actualCode);

        compilationErrors.Clear();
        compilationErrors.AddRange(errors);

        buttonLabel = "Running...";

        if (snippet != null)
        {
            await TestAndPlot(snippet, 10, 0);
            await TestAndPlot(snippet, 30, 1);
            await TestAndPlot(snippet, 60, 2);
            await TestAndPlot(snippet, 90, 3);
            await TestAndPlot(snippet, 144, 4);
            await TestAndPlot(snippet, 240, 5);
            await TestAndPlot(snippet, 60, 6, true);
        }

        buttonLabel = "Run";

        running = false;
        UpdateURL();
    }

    public void UpdateURL()
    {
        navigationManager.NavigateTo($"#{Base64Encode(InputCode)}");
    }

    public static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }

    public static string Base64Decode(string base64EncodedData)
    {
        var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
        return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
    }

    public string[] Colors = new string[] { "rgb(193, 252, 255)", "rgb(180, 255, 173)", "rgb(255, 246, 158)", "rgb(255, 174, 150)", "rgb(255, 147, 205)", "rgb(211, 158, 255)", "rgb(255, 255, 255)" };

    private async Task TestAndPlot(CompiledSnippet snippet, float fps, int ind, bool erratic = false)
    {
        Console.WriteLine(ColorUtil.RandomColorString());
        var fpsRunner = new FpsRunner(snippet, fps, erratic);
        var results = await fpsRunner.Test(1f);

        var color = Colors[ind];

        var dataSet = new ScatterDataset(results.Select(kvp => new Point(kvp.Key, kvp.Value)))
        {
            Label = erratic ? "Erratic" : fps + "FPS",
            BackgroundColor = color,
            PointBackgroundColor = color,
            BorderColor = color,
            PointBorderColor = color,
            PointHoverBackgroundColor = color,

            ShowLine = true,

            Fill = false
        };

        chartConfig.Data.Datasets.Add(dataSet);
    }

    public async Task GoodExample()
    {
        this.InputCode = Base64Decode("dmFyIGxhbWJkYSA9IDEwZjsKdmFyIHRhcmdldCA9IDEwMGY7CnZhbHVlID0gTWF0aGYuTGVycCh2YWx1ZSwgdGFyZ2V0LCAxIC0gTWF0aGYuRXhwKC1sYW1iZGEgKiBkZWx0YVRpbWUpKTs=");
        await this.Run();
    }

    public async Task BadExample()
    {
        this.InputCode = Base64Decode("Ly8gRXhhbXBsZSBvZiBhIGJhZCBlYXNpbmcgZnVuY3Rpb24KdmFyIHNwZWVkID0gMTBmOwp2YXIgdGFyZ2V0ID0gMTAwZjsKdmFsdWUgPSBNYXRoZi5MZXJwKHZhbHVlLCB0YXJnZXQsIHNwZWVkICogZGVsdGFUaW1lKTs=");
        await this.Run();
    }
}
